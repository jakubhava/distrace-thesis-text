Attachment 3: Building And Running
To build both, the native agent and the core instrumentation server, the developer needs to obtain the Distrace tool sources(Distrace is available at https://github.com/jakubhava/Distrace.) and call ./gradlew build(On Windows, ./gradlew.bat build) command, which builds the tool and produces artifacts for the core instrumentation server and the native agent as well. The build process requires several dependencies to be available.

The instrumentation server requires Java 8 to be available. It has dependencies on several libraries, but these are downloaded automatically by the build process.

The native agent depends on several libraries which needs to be availalable on the system:
itemize
	Boost-filesystem
	Boost-system
	Nanomsg
	Nanomsgxx
	Cmake
itemize
The last dependency is required to be able to build the native agent project. Any C++11 compliant compiler needs to be available as well.

Once the artifacts are build the user may extend the core instrumentation server with the instrumentation definition. The application can be further run using the following incantation:

java -agentpath:"NATIVEAGENTLIBPATH=AGENTARGS" -jar app.jar

The NATIVEAGENTLIBPATH shell variable should point to the location of the native agent library and AGENTARGS shell variable may contain any arguments passed to the native agent. The arguments are in the format key=value and are separated by the semicolon. Please see the Attachment 4 for the full list of available native agent arguments.

In order to be able to see the spans in the user interface, we need to start the Zipkin user interface first. The user interface server may be started as: java -jar zipkin.jar(Zipkin Jar file may be downloaded at https://github.com/openzipkin/zipkin or is available at the attached CD.).
Running Docker Examples
 In order to run this example without the need to set up all dependencies, the Docker container with this example is prepared. This container contains all Distrace dependencies and when started, is also automatically starts the Zipkin user interface on the default port. To run any example in Docker, Docker needs to be available, the projects source directory needs to be available as well(The sources are not actually needed for running the examples in docker, but the script which is used to start the docker machines is available there as well.) and the following script should be called: ./docker/run-test.sh(On Windows, ./docker/run-test.cmd). 
 
Both these scripts expect a single argument representing the example name. When this argument is missing, the list of available examples is printed to the console.