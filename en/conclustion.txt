Conclusion
The main goals of this thesis were to create a monitoring tool for distributed Java applications with a small footprint on the monitored application and high-level application transparency and tool universality. It was also desired to ensure the usage and deployment of the final tool is simple. 

The instrumentation overhead can be still observed even though the classes are instrumented in a separated instrumentation machine, however it is just a constant overhead based on the nature of the injected code to the original classes. The Distrace tool universality was achieved by implementing the native agent universal to all Java applications and by creating a core instrumentation server. This core server can be extended by developers and they can create application specific instrumentation tools. This also ensures that the final users of the monitored application does not need to know about the monitoring and can work with the application as usual. The developer has also the possibility to extend the monitoring platform by custom user interface and can also specify custom format for spans being exported from the application. This ensures that the Distrace tool may be integrated easily to already existing environments. The interface at the core instrumentation server is kept simple in order to make the usage straightforward also for developers.

Comparing to related Google Dapper, the Distrace tool introduced by this thesis is release as open-source and allows higher application transparency since purpose of Google Dapper is to monitor only Google applications. Comparing to Zipkin, the user does not need to change the application sources in order to attach span and trace information. This ensures that the source code of the original application remains unchanged. The tool provided by this thesis does not aim to replace any of the mentioned tools, however it tries to create an universal tool with keeping performance in mind and ensuring that the usage is a simple as possible for the end-user.


This Distrace tool is also planned to be extend in the future in the following areas:
itemize
	More Additional Span Exporters 	Currently, the Distrace tool provides two default span exporters and allows the user to extend the SpanExporter abstract class and implement custom ones. However, we would like to create more exporters in the future, which would be able to store spans into different storage types and also in different formats. At this moment, the output is in the JSON format understandable to the Zipkin user interface and the data are exported either to a disk or are send to the user interface right away. We could, for example, create a span exporter, which could export spans into a database, from which the arbitrary user interface could fetch the data.
	Support for Flame Graphs 	The second future plan is to add support for flame graphs. The native agent could be used to capture the stack-traces of the running application and later, a flame graph representing the distributed computation could be created. For example, this integration would give us the ability to inspect the memory-usage or performance cluster-vise using the flame graphs visualizations.
itemize

